services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: smartfinance-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=SmartFinance123!
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - smartfinance-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P SmartFinance123! -C -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: smartfinance-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=SmartFinance123!
      - MONGO_INITDB_DATABASE=smartfinance_payments
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docs/mongodb-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - smartfinance-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: smartfinance-redis
    command: redis-server --requirepass SmartFinance123!
    ports:
       - "6380:6379"  # Change external port to 6380
    volumes:
      - redis_data:/data
    networks:
      - smartfinance-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # .NET Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smartfinance-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Data Source=smartfinance.db
      - ConnectionStrings__RedisConnection=redis:6379,password=SmartFinance123!
      - ConnectionStrings__MongoConnection=mongodb://admin:SmartFinance123!@mongodb:27017/smartfinance_logs?authSource=admin
      - Jwt__SecretKey=YourSuperSecretKeyThatIsAtLeast32CharactersLong!
      - Jwt__Issuer=SmartFinance
      - Jwt__Audience=SmartFinanceUsers
    ports:
      - "5000:5000"
    depends_on:
      sqlserver:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartfinance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js Payment Microservice
  payment-service:
    build:
      context: ./microservice
      dockerfile: Dockerfile
    container_name: smartfinance-payment-service
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://admin:SmartFinance123!@mongodb:27017/smartfinance_payments?authSource=admin
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=SmartFinance123!
      - JWT_SECRET=YourSuperSecretKeyThatIsAtLeast32CharactersLong!
      - MAIN_API_URL=http://backend:5000/api/v1
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    ports:
      - "3001:3001"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - smartfinance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smartfinance-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=/api/v1
      - NEXT_PUBLIC_SIGNALR_URL=/financehub
      - NEXT_PUBLIC_PAYMENT_SERVICE_URL=/payment
    ports:
      - "3000:3000"
    depends_on:
      - nginx
    networks:
      - smartfinance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smartfinance-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      backend:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    networks:
      - smartfinance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: smartfinance-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - smartfinance-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: smartfinance-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=SmartFinance123!
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - smartfinance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  smartfinance-network:
    driver: bridge

volumes:
  sqlserver_data:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:
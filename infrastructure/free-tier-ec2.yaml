# CloudFormation template for free-tier only EC2 deployment
AWSTemplateFormatVersion: '2010-09-09'
Description: 'SmartFinance Free Tier EC2 Deployment - Zero Cost Infrastructure'

Parameters:
  KeyPairName:
    Type: String
    Description: 'Name of existing EC2 KeyPair for SSH access'
    Default: 'smartfinance-key'
  
  AllowedSSHIP:
    Type: String
    Description: 'IP address allowed for SSH access (use 0.0.0.0/0 for any IP)'
    Default: '0.0.0.0/0'

Resources:
  # VPC - Free tier eligible
  SmartFinanceVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: SmartFinance-FreeTier-VPC
        - Key: CostCenter
          Value: FreeTier

  # Internet Gateway - Free
  SmartFinanceIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SmartFinance-FreeTier-IGW

  # Attach IGW to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SmartFinanceVPC
      InternetGatewayId: !Ref SmartFinanceIGW

  # Public Subnet - Free
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SmartFinanceVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SmartFinance-FreeTier-PublicSubnet

  # Route Table - Free
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SmartFinanceVPC
      Tags:
        - Key: Name
          Value: SmartFinance-FreeTier-RouteTable

  # Public Route - Free
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SmartFinanceIGW

  # Associate Route Table with Subnet
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group for EC2 - Free
  SmartFinanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for SmartFinance free tier deployment'
      VpcId: !Ref SmartFinanceVPC
      SecurityGroupIngress:
        # SSH access
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSSHIP
          Description: 'SSH access'
        # HTTP access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'HTTP access'
        # HTTPS access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS access'
        # Application ports
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: 'Next.js frontend'
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
          Description: '.NET backend'
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: 0.0.0.0/0
          Description: 'Payment service'
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 10.0.0.0/16
          Description: 'MongoDB (internal only)'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: SmartFinance-FreeTier-SG

  # IAM Role for EC2 - Free
  SmartFinanceEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SmartFinance-FreeTier-EC2-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SmartFinanceFreeTierPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  # Instance Profile - Free
  SmartFinanceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref SmartFinanceEC2Role

  # EC2 Instance - t2.micro (Free Tier)
  SmartFinanceEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (free tier eligible)
      InstanceType: t2.micro  # FREE TIER ONLY
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SmartFinanceSecurityGroup
      IamInstanceProfile: !Ref SmartFinanceInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 30  # Maximum free tier EBS storage
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Install Docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Install Git
          yum install -y git
          
          # Install Node.js (for frontend builds)
          curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
          yum install -y nodejs
          
          # Install .NET SDK
          rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
          yum install -y dotnet-sdk-8.0
          
          # Create application directory
          mkdir -p /opt/smartfinance
          chown ec2-user:ec2-user /opt/smartfinance
          
          # Create startup script
          cat > /opt/smartfinance/startup.sh << 'EOF'
          #!/bin/bash
          cd /opt/smartfinance
          
          # Clone repository if not exists
          if [ ! -d "smart_finance" ]; then
            git clone https://github.com/lucasantunesribeiro/smart_finance.git
          fi
          
          cd smart_finance
          
          # Start services with Docker Compose
          docker-compose -f docker-compose.free-tier.yml up -d
          EOF
          
          chmod +x /opt/smartfinance/startup.sh
          
          # Create systemd service for auto-start
          cat > /etc/systemd/system/smartfinance.service << 'EOF'
          [Unit]
          Description=SmartFinance Application
          After=docker.service
          Requires=docker.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=yes
          User=ec2-user
          ExecStart=/opt/smartfinance/startup.sh
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl enable smartfinance.service
          
          # Install CloudWatch agent for monitoring
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm
          
          # Create CloudWatch config
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
          {
            "metrics": {
              "namespace": "SmartFinance/FreeTier",
              "metrics_collected": {
                "cpu": {
                  "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                  "metrics_collection_interval": 300
                },
                "disk": {
                  "measurement": ["used_percent"],
                  "metrics_collection_interval": 300,
                  "resources": ["*"]
                },
                "mem": {
                  "measurement": ["mem_used_percent"],
                  "metrics_collection_interval": 300
                }
              }
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "SmartFinance-FreeTier-System",
                      "log_stream_name": "{instance_id}"
                    }
                  ]
                }
              }
            }
          }
          EOF
          
          # Start CloudWatch agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
          
          # Signal completion
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SmartFinanceEC2 --region ${AWS::Region}
      
      Tags:
        - Key: Name
          Value: SmartFinance-FreeTier-Instance
        - Key: CostCenter
          Value: FreeTier
        - Key: Environment
          Value: Production
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

Outputs:
  InstanceId:
    Description: 'EC2 Instance ID'
    Value: !Ref SmartFinanceEC2
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
  
  PublicIP:
    Description: 'Public IP address of the EC2 instance'
    Value: !GetAtt SmartFinanceEC2.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-PublicIP'
  
  PublicDNS:
    Description: 'Public DNS name of the EC2 instance'
    Value: !GetAtt SmartFinanceEC2.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-PublicDNS'
  
  SSHCommand:
    Description: 'SSH command to connect to the instance'
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${SmartFinanceEC2.PublicIp}'
  
  ApplicationURL:
    Description: 'URL to access the SmartFinance application'
    Value: !Sub 'http://${SmartFinanceEC2.PublicIp}'
  
  VPCId:
    Description: 'VPC ID'
    Value: !Ref SmartFinanceVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'
  
  SubnetId:
    Description: 'Public Subnet ID'
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub '${AWS::StackName}-SubnetId'
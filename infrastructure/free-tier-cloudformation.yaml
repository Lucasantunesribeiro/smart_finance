AWSTemplateFormatVersion: '2010-09-09'
Description: 'SmartFinance Free Tier Infrastructure - Zero Cost EC2 Deployment'

Parameters:
  KeyPairName:
    Type: String
    Description: Name of the EC2 Key Pair for SSH access
    Default: smartfinance-keypair
  
  AllowedSSHCIDR:
    Type: String
    Description: CIDR block allowed for SSH access
    Default: 0.0.0.0/0
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}/\d{1,2}$'
  
  ProjectName:
    Type: String
    Description: Name of the project for resource tagging
    Default: SmartFinance
  
  Environment:
    Type: String
    Description: Environment name
    Default: production
    AllowedValues:
      - production
      - staging
      - development

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c02fb55956c7d316  # Amazon Linux 2023 AMI
    us-west-2:
      AMI: ami-008fe2fc65df48dac  # Amazon Linux 2023 AMI
    eu-west-1:
      AMI: ami-01dd271720c1ba44f  # Amazon Linux 2023 AMI
    ap-southeast-1:
      AMI: ami-0df7a207adb9748c7  # Amazon Linux 2023 AMI

Resources:
  # VPC - Using default VPC to stay within free tier
  SmartFinanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for SmartFinance application
      GroupName: !Sub '${ProjectName}-${Environment}-sg'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSSHCIDR
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-SecurityGroup'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: CostCenter
          Value: FreeTier

  # IAM Role for EC2 instance (minimal permissions)
  SmartFinanceEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-EC2Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SmartFinanceMinimalPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/ec2/smartfinance*'
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-EC2Role'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  SmartFinanceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ProjectName}-${Environment}-InstanceProfile'
      Roles:
        - !Ref SmartFinanceEC2Role

  # EC2 Instance - t2.micro (free tier eligible)
  SmartFinanceEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: t2.micro  # Free tier eligible
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref SmartFinanceSecurityGroup
      IamInstanceProfile: !Ref SmartFinanceInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2  # Free tier eligible
            VolumeSize: 30   # Maximum free tier size
            DeleteOnTermination: true
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Install Docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Install Git
          yum install -y git
          
          # Install Node.js (for npm operations)
          curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
          yum install -y nodejs
          
          # Install .NET 8 SDK
          rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
          yum install -y dotnet-sdk-8.0
          
          # Create application directory
          mkdir -p /opt/smartfinance
          chown ec2-user:ec2-user /opt/smartfinance
          
          # Create systemd service for SmartFinance
          cat > /etc/systemd/system/smartfinance.service << 'EOF'
          [Unit]
          Description=SmartFinance Application
          After=docker.service
          Requires=docker.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory=/opt/smartfinance/current
          ExecStart=/usr/local/bin/docker-compose -f docker-compose.prod.yml up -d
          ExecStop=/usr/local/bin/docker-compose -f docker-compose.prod.yml down
          User=ec2-user
          Group=ec2-user
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl daemon-reload
          systemctl enable smartfinance
          
          # Install CloudWatch agent
          yum install -y amazon-cloudwatch-agent
          
          # Create CloudWatch agent config
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
          {
            "metrics": {
              "namespace": "SmartFinance/EC2",
              "metrics_collected": {
                "cpu": {
                  "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                  "metrics_collection_interval": 300
                },
                "disk": {
                  "measurement": ["used_percent"],
                  "metrics_collection_interval": 300,
                  "resources": ["*"]
                },
                "diskio": {
                  "measurement": ["io_time"],
                  "metrics_collection_interval": 300,
                  "resources": ["*"]
                },
                "mem": {
                  "measurement": ["mem_used_percent"],
                  "metrics_collection_interval": 300
                }
              }
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/aws/ec2/smartfinance/system",
                      "log_stream_name": "{instance_id}/messages"
                    },
                    {
                      "file_path": "/opt/smartfinance/current/logs/*.log",
                      "log_group_name": "/aws/ec2/smartfinance/application",
                      "log_stream_name": "{instance_id}/app"
                    }
                  ]
                }
              }
            }
          }
          EOF
          
          # Start CloudWatch agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config -m ec2 -s \
            -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          
          # Create health check script
          cat > /opt/smartfinance/health-check.sh << 'EOF'
          #!/bin/bash
          # Health check script for SmartFinance application
          
          # Check if Docker containers are running
          if ! docker-compose -f /opt/smartfinance/current/docker-compose.prod.yml ps | grep -q "Up"; then
            echo "ERROR: Docker containers not running"
            exit 1
          fi
          
          # Check if application is responding
          if ! curl -f -s http://localhost/health > /dev/null; then
            echo "ERROR: Application health check failed"
            exit 1
          fi
          
          echo "OK: Application is healthy"
          exit 0
          EOF
          
          chmod +x /opt/smartfinance/health-check.sh
          
          # Create cost monitoring script
          cat > /opt/smartfinance/cost-monitor.sh << 'EOF'
          #!/bin/bash
          # Cost monitoring script - shuts down instance if costs detected
          
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region)
          
          # Check current costs (requires AWS CLI and proper IAM permissions)
          CURRENT_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$(date -d "$(date +%Y-%m-01)" +%Y-%m-%d),End=$(date +%Y-%m-%d) \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --region $REGION \
            --query 'ResultsByTime[0].Total.BlendedCost.Amount' \
            --output text 2>/dev/null || echo "0")
          
          # If costs exceed $0.01, shutdown instance
          if (( $(echo "$CURRENT_COST > 0.01" | bc -l) )); then
            echo "ALERT: Costs detected ($CURRENT_COST). Shutting down instance."
            aws ec2 stop-instances --instance-ids $INSTANCE_ID --region $REGION
          fi
          EOF
          
          chmod +x /opt/smartfinance/cost-monitor.sh
          
          # Add cost monitoring to crontab (check every hour)
          echo "0 * * * * /opt/smartfinance/cost-monitor.sh" | crontab -u ec2-user -
          
          # Signal CloudFormation that instance is ready
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SmartFinanceEC2Instance --region ${AWS::Region}
          
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-Instance'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: CostCenter
          Value: FreeTier
        - Key: AutoShutdown
          Value: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

  # CloudWatch Log Groups (free tier: 5GB per month)
  SystemLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/smartfinance/system
      RetentionInDays: 7  # Keep logs for 7 days to stay within free tier
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/smartfinance/application
      RetentionInDays: 7  # Keep logs for 7 days to stay within free tier
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Alarms for cost monitoring (free tier: 10 alarms)
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-HighCPU'
      AlarmDescription: 'Alert when CPU usage is high'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref SmartFinanceEC2Instance
      TreatMissingData: notBreaching

  HighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-HighMemory'
      AlarmDescription: 'Alert when memory usage is high'
      MetricName: mem_used_percent
      Namespace: SmartFinance/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref SmartFinanceEC2Instance
      TreatMissingData: notBreaching

Outputs:
  InstanceId:
    Description: 'EC2 Instance ID'
    Value: !Ref SmartFinanceEC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
  
  PublicIP:
    Description: 'Public IP address of the EC2 instance'
    Value: !GetAtt SmartFinanceEC2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-PublicIP'
  
  PublicDNS:
    Description: 'Public DNS name of the EC2 instance'
    Value: !GetAtt SmartFinanceEC2Instance.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-PublicDNS'
  
  SecurityGroupId:
    Description: 'Security Group ID'
    Value: !Ref SmartFinanceSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'
  
  ApplicationURL:
    Description: 'URL to access the SmartFinance application'
    Value: !Sub 'http://${SmartFinanceEC2Instance.PublicIp}'
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationURL'
  
  SSHCommand:
    Description: 'SSH command to connect to the instance'
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${SmartFinanceEC2Instance.PublicIp}'
    Export:
      Name: !Sub '${AWS::StackName}-SSHCommand'
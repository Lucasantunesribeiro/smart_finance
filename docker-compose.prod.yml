version: '3.8'

services:
  # MongoDB Database - Optimized for t2.micro
  mongodb:
    image: mongo:5.0
    container_name: smartfinance-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: smartfinance
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: smartfinance123
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - smartfinance-network
    ports:
      - "27017:27017"
    mem_limit: 300m
    cpus: 0.3
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # .NET Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: smartfinance-backend
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=mongodb://admin:smartfinance123@mongodb:27017/smartfinance?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret-change-this-in-production}
      - CORS_ORIGINS=http://34.203.238.219:3000,http://34.203.238.219,http://localhost:3000,http://localhost
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - smartfinance-network
    ports:
      - "5000:5000"
    mem_limit: 200m
    cpus: 0.2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node.js Payment Microservice
  payment-service:
    build:
      context: ./microservice
      dockerfile: Dockerfile.prod
    container_name: smartfinance-payment
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://admin:smartfinance123@mongodb:27017/smartfinance?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret-change-this-in-production}
      - REDIS_URL=redis://redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartfinance-network
    ports:
      - "3001:3001"
    mem_limit: 100m
    cpus: 0.15
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/payment/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Payment Service
  redis:
    image: redis:7-alpine
    container_name: smartfinance-redis
    restart: unless-stopped
    command: redis-server --maxmemory 50mb --maxmemory-policy allkeys-lru
    networks:
      - smartfinance-network
    mem_limit: 50m
    cpus: 0.1
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - NEXT_PUBLIC_API_URL=http://34.203.238.219:5000/api/v1
        - NEXT_PUBLIC_PAYMENT_API_URL=http://34.203.238.219:3001/payment
    container_name: smartfinance-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
    depends_on:
      backend:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    networks:
      - smartfinance-network
    ports:
      - "3000:3000"
    mem_limit: 150m
    cpus: 0.2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smartfinance-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    networks:
      - smartfinance-network
    mem_limit: 80m
    cpus: 0.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Health Checks
  watchtower:
    image: containrrr/watchtower
    container_name: smartfinance-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
    networks:
      - smartfinance-network
    mem_limit: 30m
    cpus: 0.05

volumes:
  mongodb_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  smartfinance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Resource limits for entire stack:
# Total memory: ~830MB (within 1GB t2.micro limit)
# Total CPU: ~1.0 (t2.micro has 1 vCPU)
# 
# Memory breakdown:
# - MongoDB: 300MB
# - Backend: 200MB  
# - Frontend: 150MB
# - Payment: 100MB
# - Nginx: 80MB
# - Redis: 50MB
# - Watchtower: 30MB
# - System overhead: ~180MB
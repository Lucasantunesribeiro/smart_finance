services:
  # SQL Server Database - Optimized for t2.micro
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: smartfinance-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SQL_PASSWORD}
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - smartfinance-network
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P ${SQL_PASSWORD} -C -Q 'SELECT 1'"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  # MongoDB Database - Optimized
  mongodb:
    image: mongo:7.0
    container_name: smartfinance-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=smartfinance_payments
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docs/mongodb-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - smartfinance-network
    deploy:
      resources:
        limits:
          memory: 150M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  # Redis Cache - Optimized
  redis:
    image: redis:7.2-alpine
    container_name: smartfinance-redis
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--maxmemory", "50mb", "--maxmemory-policy", "allkeys-lru"]
    ports:
       - "6381:6379"
    volumes:
      - redis_data:/data
    networks:
      - smartfinance-network
    deploy:
      resources:
        limits:
          memory: 80M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  # .NET Backend API - Optimized
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smartfinance-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Data Source=smartfinance.db
      - ConnectionStrings__RedisConnection=redis:6379,password=${REDIS_PASSWORD}
      - ConnectionStrings__MongoConnection=mongodb://admin:${MONGO_PASSWORD}@mongodb:27017/smartfinance_logs?authSource=admin
      - Jwt__SecretKey=${JWT_SECRET}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    ports:
      - "5000:5000"
    depends_on:
      sqlserver:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartfinance-network
    deploy:
      resources:
        limits:
          memory: 250M
          cpus: '0.3'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  # Node.js Payment Microservice - Optimized
  payment-service:
    build:
      context: ./microservice
      dockerfile: Dockerfile
    container_name: smartfinance-payment-service
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://admin:${MONGO_PASSWORD}@mongodb:27017/smartfinance_payments?authSource=admin
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - MAIN_API_URL=http://backend:5000/api/v1
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    ports:
      - "3001:3001"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - smartfinance-network
    deploy:
      resources:
        limits:
          memory: 150M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  # Next.js Frontend - Optimized
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smartfinance-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=/api/v1
      - NEXT_PUBLIC_SIGNALR_URL=/financehub
      - NEXT_PUBLIC_PAYMENT_SERVICE_URL=/payment
    ports:
      - "3000:3000"
    depends_on:
      - nginx
    networks:
      - smartfinance-network
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smartfinance-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      backend:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    networks:
      - smartfinance-network
    deploy:
      resources:
        limits:
          memory: 50M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: unless-stopped

networks:
  smartfinance-network:
    driver: bridge

volumes:
  sqlserver_data:
  mongodb_data:
  redis_data:
